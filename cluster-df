#!/usr/bin/ruby
require 'json'
require 'optparse'
require __dir__ + '/lib/color.rb'
require __dir__ + '/lib/filesize.rb'

options = {}
OptionParser.new do |opts|
	opts.banner = "Usage: cluster-df [options]"

	opts.on("-c", "--config", "Use this configuration file instead of the default") do |c|
		options[:config] = ARGV[0]
	end
	opts.on("-n", "--name", "Client name for authentication") do |n|
		options[:name] = ARGV[0]
	end
	opts.on("-f", "--format", "Change output format") do |f|
		options[:format] = ARGV[0]
	end
	opts.on("-h", "--human", "Show data in human readable format") do |b|
		options[:human] = b
	end
	opts.on("-s", "--show", "Suppress normal output, show only [pools, rules, cluster] info") do |s|
		options[:show] = ARGV[0]
	end
end.parse!

ceph_args = ""
ceph_args = "#{ceph_args} -c #{options[:config]}"	if options[:config] != nil
ceph_args = "#{ceph_args} --name #{options[:name]}"	if options[:name] != nil

data = Hash["pools" => Array.new, "rules" => Array.new, "cluster" => Array.new]
total_rbd_size = 0
total_rbd_replic_size = 0
total_raw_size = 0

begin
	cephdf = `ceph #{ceph_args} --format json df 2>/dev/null`
	cephdf = JSON.parse(cephdf)
rescue Exception => e
	puts "Error parsing 'ceph df' output: #{e}"
	exit
end


def printHeader(header)
	puts "#{header}:".gray
	print "	NAME".ljust(25).cyan
	Array["MAX AVAIL.", "PROVISIONED", "PROV. REPLIC.", "%", "USED", "USED REPLIC.", "%"].each { |str| print "#{str.ljust(20).cyan}" }
	puts ""
end

def printVals(vals, human = False)
	vals.each do |key, val|
		if key == "name"
			print "	#{val.ljust(24)}".gray
			next
		end
		if key =~ /perc/
			str = "#{val} %".red    if val < 100 && val > 50
			str = "#{val} %".brown  if val < 50 && val > 20
			str = "#{val} %".green  if val < 20
			print "#{str.ljust(29)}"
		else
			val = Filesize.do("#{val} B") if human
			print "#{str.ljust(20)}"
		end
	end
	puts ""
end


printHeader("POOLS") if (options[:show] == nil || options[:show] == "pools") && options[:format] == nil
cephdf["pools"].each do |pool|
	begin
		rbd = `rbd #{ceph_args} --format json ls -l #{pool["name"]} 2>/dev/null`
		rbd = JSON.parse(rbd)
	rescue Exception => e
		puts "Error parsing pool #{pool['name']}: #{e}"
		next
	end

	pool_info = Hash["name" => pool["name"], "avail" => 0, "rbd_size" => 0, "rbd_replic" => 0, "rbd_perc" => 0, "raw_size" => pool["stats"]["bytes_used"], "raw_replic" => pool["stats"]["bytes_used"] * 3, "raw_perc" => 0]
	## Ceph is calculating max. avail. as 90% of total, but we need total
	pool_info["avail"] = pool["stats"]["max_avail"] * 100 / 90

	rbd.each do |rbd_vol|
		next if rbd_vol["snapshot"] != nil
		pool_info["rbd_size"] = pool_info["rbd_size"] + rbd_vol["size"]
	end

	begin
		pool_replicas = `ceph #{ceph_args} --format json osd pool get #{pool["name"]} size 2>/dev/null`
		pool_replicas = JSON.parse(pool_replicas)
	rescue Exception => e
		puts "Error parsing pool size #{pool['name']}: #{e}"
		next
	end

	pool_info["rbd_replic"] = pool_info["rbd_size"] * pool_replicas["size"].to_i

	pool_info["rbd_perc"] = pool_info["rbd_size"] * 100 / pool_info["avail"]
	pool_info["raw_perc"] = pool_info["raw_size"] * 100 / pool_info["avail"]

	total_rbd_size = total_rbd_size + pool_info["rbd_size"]
	total_rbd_replic_size = total_rbd_replic_size + pool_info["rbd_replic"]
	total_raw_size = total_raw_size + pool_info["raw_size"]

	printVals(pool_info, options[:human]) if (options[:show] == nil || options[:show] == "pools") && options[:format] == nil
	data["pools"].push(pool_info)
end



begin
	rules_json = `ceph #{ceph_args} --format json osd crush rule dump 2>/dev/null`
	rules_json = JSON.parse(rules_json)
rescue Exception => e
	puts "Error parsing crush rules: #{e}"
	exit
end

printHeader("RULES") if (options[:show] == nil || options[:show] == "rules") && options[:format] == nil
rules_json.each do |rule|
	rule_info = Hash["name" => rule["rule_name"], "avail" => 0, "rbd_size" => 0, "rbd_replic" => 0, "rbd_perc" => 0, "raw_size" => 0, "raw_replic" => 0, "raw_perc" => 0]

	data["pools"].each do |pool|
		begin
			crush_rule = `ceph #{ceph_args} --format json osd pool get #{pool['name']} crush_ruleset 2>/dev/null`
			crush_rule = JSON.parse(crush_rule)
		rescue Exception => e
			puts "Error parsing crush ruleset on #{pool['name']}: #{e}"
			next
		end

		if crush_rule["crush_ruleset"] == rule['rule_id']
			rule_info['avail'] = pool['avail']
			Array['rbd_size', 'rbd_replic', 'rbd_perc', 'raw_size', 'raw_replic', 'raw_perc'].each { |str| rule_info[str] = rule_info[str] + pool[str] }
		end
	end

	printVals(rule_info, options[:human]) if (options[:show] == nil || options[:show] == "rules") && options[:format] == nil
	data["rules"].push(rule_info)
end

total_size = cephdf["stats"]["total_bytes"]
total_raw_replic = cephdf["stats"]["total_used_bytes"]
total_rbd_perc = total_rbd_size * 100 / total_size
total_raw_perc = total_raw_size * 100 / total_size

if options[:human]
	total_size = Filesize.do("#{total_size} B")
	total_rbd_size = Filesize.do("#{total_rbd_size} B")
	total_rbd_replic_size = Filesize.do("#{total_rbd_replic_size} B")
	total_raw_size = Filesize.do("#{total_raw_size} B")
	total_raw_replic = Filesize.do("#{total_raw_replic} B")
end


if (options[:show] == nil || options[:show] == "cluster") && options[:format] == nil
	printHeader("CLUSTER")

	total_rbd_perc = "#{total_rbd_perc} %"
	total_raw_perc = "#{total_raw_perc} %"

	print "	Cluster".ljust(25)
	print "#{total_size.to_s.ljust(20)}#{total_rbd_size.to_s.ljust(20)}#{total_rbd_replic_size.to_s.ljust(20)}#{total_rbd_perc.to_s.ljust(20)}"
	print "#{total_raw_size.to_s.ljust(20)}#{total_raw_replic.to_s.ljust(20)}#{total_raw_perc.to_s.ljust(20)}\n"
end

if options[:format] == "json"
	puts data.to_json
end
